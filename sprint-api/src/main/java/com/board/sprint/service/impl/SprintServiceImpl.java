package com.board.sprint.service.impl;

import com.board.sprint.configuration.mapper.Mapper;
import com.board.sprint.dto.SprintDto;
import com.board.sprint.entity.Sprint;
import com.board.sprint.repository.SprintRepository;
import com.board.sprint.service.SprintService;
import com.board.sprint.utils.NoContent;
import com.board.sprint.utils.ServiceResponse;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Service
public class SprintServiceImpl implements SprintService {
    private final SprintRepository repository;
    private final Mapper<Sprint, SprintDto> mapper;

    public SprintServiceImpl(SprintRepository repository, Mapper<Sprint, SprintDto> mapper) {
        this.repository = repository;
        this.mapper = mapper;
    }

    /**
     * Retrieves a sprint associated with the given id.
     *
     * @param id the ID of the Sprint
     * @return a sprint under the specified id
     */
    @Override
    public ServiceResponse<SprintDto> getById(UUID id) {
        return ServiceResponse
                .success(mapper.toDto(repository.findById(id).orElseThrow()), 200);
    }

    /**
     * Retrieves all sprints linked to the given project ID.
     *
     * @param projectId the ID of the project
     * @return a list of sprint DTOs
     */
    @Override
    public ServiceResponse<List<SprintDto>> getByProject(UUID projectId) {
        return ServiceResponse
                .success(repository.findByProjectId(projectId).stream().map(mapper::toDto).toList(), 200);
    }

    /**
     * Retrieves all sprints associated with the given team ID.
     *
     * @param teamId the ID of the team
     * @return a list of sprint DTOs
     */
    @Override
    public ServiceResponse<List<SprintDto>> getByTeam(UUID teamId) {
        return ServiceResponse
                .success(repository.findByTeamId(teamId).stream().map(mapper::toDto).toList(), 200);
    }

    /**
     * Creates a new sprint from the given model.
     *
     * @param model the sprint DTO to create
     * @return the created sprint DTO
     */
    @Override
    public ServiceResponse<SprintDto> create(SprintDto model) {
        Sprint sprint = mapper.toEntity(model);
        sprint.setId(null); // ensure ID is generated by DB
        Sprint createdSprint = repository.save(sprint);
        return ServiceResponse.success(mapper.toDto(createdSprint), 201);
    }

    /**
     * Updates an existing sprint with new data.
     *
     * @param model the sprint DTO with updated values
     * @return the updated sprint DTO
     * @throws Exception if the sprint is not found
     */
    @Override
    public ServiceResponse<SprintDto> update(SprintDto model) throws Exception {
        Sprint sprint = repository.findById(model.getId()).orElseThrow(Exception::new);
        sprint.setGoal(model.getGoal());
        sprint.setName(model.getName());
        sprint.setState(model.getState());
        sprint.setStartDate(model.getStartDate());
        sprint.setEndDate(model.getEndDate());
        Sprint updatedSprint = repository.save(sprint);
        return ServiceResponse.success(mapper.toDto(updatedSprint), 200);
    }

    /**
     * Marks the sprint as deleted by its ID.
     *
     * @param id the ID of the sprint to delete
     * @return a successful no-content response
     * @throws Exception if the sprint is not found
     */
    @Override
    public ServiceResponse<NoContent> delete(UUID id) throws Exception {
        Sprint sprint = repository.findById(id).orElseThrow(Exception::new);
        sprint.setDeleted(true);
        repository.save(sprint);
        return ServiceResponse.success(200);
    }
}
